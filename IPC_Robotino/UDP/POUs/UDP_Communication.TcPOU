<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.3">
  <POU Name="UDP_Communication" Id="{908d85d7-bdec-44b4-8e91-5a81c664be5d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK UDP_Communication IMPLEMENTS ITcIoUdpProtocolRecv
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	{attribute 'TcInitSymbol'}
    oid:              OTCID; 
    ipUdp:            ITcIoUdpProtocol;
    updPort:          UINT := 25000;
    nReceivedPakets:  UINT;
    hrInit :          HRESULT;
    hrSend :          HRESULT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ipUdp <> 0 THEN
    ipUdp.CheckReceived();
END_IF

]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{91b28bdb-201a-42a2-b295-09a526170ca2}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT bInCopyCode AND ipUdp <> 0) THEN //Shutdown
     ipUdp.UnregisterReceiver(updPort);
    FW_SafeRelease(ADR(ipUdp));
     FB_exit := TRUE;
ELSE
     FB_exit := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{19d8cb2a-8a20-40d0-a961-90faf7633758}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR

VAR
    ipSrv: ITComObjectServer;
    hr : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
    IF ipUdp = 0 THEN
     hrInit := FW_ObjMgr_GetObjectInstance(   oid:=oid, 
    
    iid:=TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocol, 

    pipUnk:=ADR(ipUdp) );
        IF ( SUCCEEDED(hr) AND ipUdp.RegisterReceiver(updPort, THIS^) = 0 ) THEN //open port
            FB_init := TRUE;
        ELSE
            FB_init := FALSE; 
            FW_SafeRelease(ADR(ipUdp));
        END_IF
    END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{588a6fca-6d41-460a-bd5f-3d6027e559d1}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipUdp <> 0) THEN 
 ipUdp.RegisterReceiver(updPort, THIS^);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData" Id="{2f7b2000-e86c-4728-a38c-c65fb7de05f5}">
      <Declaration><![CDATA[{attribute 'object_name' := 'ReceiveData'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD ReceiveData : HRESULT
VAR_INPUT
	ipAddr	: UDINT;
	udpDestPort	: UINT;
	udpSrcPort	: UINT;
	nData	: UDINT;
	pData	: PVOID;
	pVlan	: POINTER TO ETYPE_VLAN_HEADER := 0;
END_VAR

VAR
	i		:	UINT;
	ptByte	: POINTER TO LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nReceivedPakets := nReceivedPakets+1;

UDP.nPaketlaenge := nData; //Auslesen der Datenlänge des gesendeten UDP-Pakets

UDP.firstByte := pData;
UDP.nextByte := UDP.firstByte + 8;

memcpy(ADR(UDP.x[1]),pData,8); 
memcpy(ADR(UDP.y[1]),pData+UDP.nextByte,8); 
memcpy(ADR(UDP.theta[1]),pData+2*SIZEOF(ptByte^),8); 



]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcAddRef" Id="{b7e7da53-14ba-4e6a-a78f-5c64e2c860c5}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{warning 'Methodenimplementierung hinzufügen'}
METHOD TcAddRef : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{1dc1e3ec-099e-424e-819e-fbd704054bd6}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{warning 'Methodenimplementierung hinzufügen'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcRelease" Id="{ecb6da5d-4b5e-4d06-b69f-01dc1b87874f}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{warning 'Methodenimplementierung hinzufügen'}
METHOD TcRelease : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="UDP_Communication">
      <LineId Id="17" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.FB_exit">
      <LineId Id="7" Count="5" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.FB_init">
      <LineId Id="12" Count="7" />
      <LineId Id="21" Count="5" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.FB_reinit">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.ReceiveData">
      <LineId Id="29" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="99" Count="2" />
      <LineId Id="103" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="56" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.TcAddRef">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.TcQueryInterface">
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="UDP_Communication.TcRelease">
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>